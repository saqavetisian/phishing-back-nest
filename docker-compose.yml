services:
  gateway:
    build: ./gateway
    restart: always
    hostname: gateway
    env_file:
      - .env
    ports:
      - ${API_GATEWAY_PORT}:${API_GATEWAY_PORT}
    networks:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${API_GATEWAY_PORT}/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  simulator:
    build: ./simulator
    restart: always
    hostname: simulator
    env_file:
      - .env
    ports:
      - ${SIMULATOR_PORT}:${SIMULATOR_PORT}
    networks:
      - backend
    depends_on:
      - db
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${SIMULATOR_PORT}/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  attempt:
    build: ./attempt
    restart: always
    hostname: attempt
    env_file:
      - .env
    ports:
      - ${ATTEMPT_PORT}:${ATTEMPT_PORT}
    networks:
      - backend
    depends_on:
      - db
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${ATTEMPT_PORT}/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  db:
    image: 'mongo:6.0'
    restart: always
    hostname: db
    environment:
     MONGO_INITDB_DATABASE: ${MONGO_DSN}
    volumes:
      - "./db/init:/docker-entrypoint-initdb.d"
      - "mongo_data:/data/db"
    networks:
      - backend
    ports:
      - "27017:27017"
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  backend:
    driver: bridge
  frontend:
    driver: bridge

volumes:
  mongo_data: